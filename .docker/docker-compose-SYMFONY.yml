##########################################################################################################
###      _            _                                                                             _  ###
###     | |          | |                                                                           | | ###
###   __| | ___   ___| | _____ _ __ ______ ___ ___  _ __ ___  _ __   ___  ___  ___  _   _ _ __ ___ | | ###
###  / _` |/ _ \ / __| |/ / _ \ '__|______/ __/ _ \| '_ ` _ \| '_ \ / _ \/ __|/ _ \| | | | '_ ` _ \| | ###
### | (_| | (_) | (__|   <  __/ |        | (_| (_) | | | | | | |_) | (_) \__ \  __/| |_| | | | | | | | ###
###  \__,_|\___/ \___|_|\_\___|_|         \___\___/|_| |_| |_| .__/ \___/|___/\___(_)__, |_| |_| |_|_| ###
###                                                          | |                     __/ |             ###
###                                                          |_|                    |___/              ###
###                                                                                                    ###
###                                                                                                    ###
###   nginx -> default image                                                                           ###
###   php-fpm-buster -> dockerfile                                                                     ###
###   @author antonio.rodrigo@digitalvirgo.com                                                         ###
##########################################################################################################

### In anfitrion machine ###
### To install docker services (into .docker directory):
# docker-compose-v1.exe up -d --force-recreate --build
# docker-compose up -d --force-recreate --build
### To entry in php-fpm container:
# docker exec -it xx_COMPOSE_PROJECT_NAME_php_fpm_PHP_VER bash
### To entry in container with user root:
# docker exec -it -u root xx_COMPOSE_PROJECT_NAME_php_fpm_PHP_VER bash

### Into container Script dont work ###
### To clean /var/www data with vervose:
### ---> sh /scripts/scriptActionsParams.sh -c -v
### To create new symfony project with vervose:
### ---> sh /scripts/scriptActionsParams.sh -p projectName -v
### To create new symfony project + base modules with vervose:
### ---> sh /scripts/scriptActionsParams.sh -p projectName -b -v
### ALL
### ---> sh /scripts/scriptActionsParams.sh -c -p projectName -b -v

######################## project compress ########################
### symfony
### ---> sh /scripts/scriptActionsParams.sh -p symfony -v
### angular
### ---> sh /scripts/scriptActionsParams.sh -p angular -v
########################  project compress ########################

### INIT docker-composer FILE ###
version: '3.9'

services:

#   ### frontend projects ###
#   angular-ui:
#     container_name: ${PREFIX_PROJECT_NAME}_${ANGULAR_CLI_VER}
#     build:
#       context: ./
#       dockerfile: Dockerfile-angular
#       args:
#           NODE_VER: ${NODE_VER}
#           NPM_VER: ${NPM_VER}
#           ANGULAR_CLI_VER: ${ANGULAR_CLI_VER}
#           ANGULAR_VER: ${ANGULAR_VER}
#           TYSCRIPT_VER: ${TYSCRIPT_VER}
#           RxJS_VER: ${RxJS_VER}
#           WWW_PATH_INT: ${WWW_PATH_INT}
#           ANGULAR_PORT: ${ANGULAR_PORT}
#           ANGULAR_PORT_1: ${ANGULAR_PORT_1}
#           ANGULAR_PORT_2: ${ANGULAR_PORT_2}
#           ANGULAR_PORT_3: ${ANGULAR_PORT_3}
#           ANGULAR_PORT_4: ${ANGULAR_PORT_4}
#           ANGULAR_PORT_5: ${ANGULAR_PORT_5}
#           ANGULAR_PORT_6: ${ANGULAR_PORT_6}
#           ANGULAR_PORT_7: ${ANGULAR_PORT_7}
#           ANGULAR_PORT_8: ${ANGULAR_PORT_8}
#           ANGULAR_PORT_9: ${ANGULAR_PORT_9}
#           ANGULAR_PORT_0: ${ANGULAR_PORT_0}

#     user: ${PUID}:${PUID}
#     working_dir: ${WWW_PATH_INT}
#     restart: unless-stopped
#     stdin_open: true # docker run -i
#     tty: true        # docker run -t
#     # networks:
#     #   - nodeFrontend
#     # hostname: ${PREFIX_PROJECT_NAME}
#     # network_mode: host

#     ports:
#       - '127.0.0.1:${ANGULAR_PORT}:${ANGULAR_PORT}'
#       - '127.0.0.1:${ANGULAR_PORT_1}:${ANGULAR_PORT_1}'
#       - '127.0.0.1:${ANGULAR_PORT_2}:${ANGULAR_PORT_2}'
#       - '127.0.0.1:${ANGULAR_PORT_3}:${ANGULAR_PORT_3}'
#       - '127.0.0.1:${ANGULAR_PORT_4}:${ANGULAR_PORT_4}'
#       - '127.0.0.1:${ANGULAR_PORT_5}:${ANGULAR_PORT_5}'
#       - '127.0.0.1:${ANGULAR_PORT_6}:${ANGULAR_PORT_6}'
#       - '127.0.0.1:${ANGULAR_PORT_7}:${ANGULAR_PORT_7}'
#       - '127.0.0.1:${ANGULAR_PORT_8}:${ANGULAR_PORT_8}'
#       - '127.0.0.1:${ANGULAR_PORT_9}:${ANGULAR_PORT_9}'
#       - '127.0.0.1:${ANGULAR_PORT_0}:${ANGULAR_PORT_0}'
#     volumes:
#        - ${WWW_PATH_EXT}:${WWW_PATH_INT}
#       #  - ${WWW_PATH_INT}/node_modules

# # ### networks
# # networks:
# #   nodeFrontend:
# # # #    ipam:
# # # #      config:
# # # #        - subnet: 172.16.238.0/24
# # # #          gateway: 172.16.238.1
# # ### networks

#   ### frontend projects ###

  ### BBDD projects ###
  # ### POSTGRES -> if you want to use service postgre individual for this project
  database:
    container_name: ${PREFIX_PROJECT_NAME}_postgres_${POSTGRES_VER}
    image: postgres:${POSTGRES_VER}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db_data_pgsql:/var/lib/postgresql/data:rw
    ports:
      - ${POSTGRES_PORT}:5432
    restart: unless-stopped

  # ### MARIADB -> if you want to use service mariadb individual for this project
  # mariadb:
  #   container_name: ${PREFIX_PROJECT_NAME}_mariadb_${MARIADB_VER}
  #   image: lscr.io/linuxserver/mariadb:${MARIADB_VER}
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  #     - TZ=${TIMEZONE}
  #     - MYSQL_DATABASE=${MYSQL_DATABASE} #optional
  #     - MYSQL_USER=${MYSQL_USER} #optional
  #     - MYSQL_PASSWORD=${MYSQL_PASSWORD} #optional
  #   #   - REMOTE_SQL=http://URL1/your.sql,https://URL2/your.sql #optional
  #   volumes:
  #     - ./db_data_mysql/:/config
  #   ports:
  #     - ${MYSQL_PORT}:3306
  #   restart: unless-stopped
  # # https://hub.docker.com/r/linuxserver/mariadb
  ### BBDD projects ###

  ### web Server projects ###
  ### NGINX
  nginx:
    container_name: ${PREFIX_PROJECT_NAME}_nginx_${NGINX_VER}
    image: nginx:${NGINX_VER}
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_PORT_S}:443
    environment:
      WWW_PATH_INT: ${WWW_PATH_INT}
    volumes:
      - ${WWW_PATH_EXT}:${WWW_PATH_INT}
      - ./configFiles/nginx-default.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped
      ### MEMORY VALORS
    mem_reservation: ${MEMORY_RESERVATION}
    mem_limit: ${MEMORY_LIMIT}

  ### PHP
  php:
    container_name: ${PREFIX_PROJECT_NAME}_php_fpm_${PHP_VER}
    build:
      # context: "Dockerfile-php-pdo_mysql-pdo_pgsql-pdo_sqlsrv" ### SqlServer
      # context: ".Dockerfile-php-pdo_mysql-pdo_pgsql" ### => RaspberryPi
      context: ./ ### dockerfiles dir
      dockerfile: Dockerfile-php-pdo_mysql-pdo_pgsql-pdo_sqlsrv ### SqlServer
      # context: "." ### Dockerfile
      args:
          PHP_VER: ${PHP_VER}
    environment:
      WWW_PATH_INT: ${WWW_PATH_INT}
    volumes:
      - ${WWW_PATH_EXT}:${WWW_PATH_INT}
      - ./configFiles/php-custom.ini:/etc/php/${WWW_PATH_INT}/fpm/conf.d/99-custom.ini
      - ./configFiles/php-custom.ini:/etc/php/${WWW_PATH_INT}/cli/conf.d/99-custom.ini
      - ./configFiles/php-fpm-pool.conf:/etc/php/${WWW_PATH_INT}/fpm/pool.d/zz-fpm-pool.conf
    user: ${PUID}:${PUID}
    working_dir: ${WWW_PATH_INT}
    restart: unless-stopped
    ### MEMORY VALORS
    mem_reservation: ${MEMORY_RESERVATION}
    mem_limit: ${MEMORY_LIMIT}
  ### web Server projects ###
  
  ### REDIS
  redis:
    container_name: ${PREFIX_PROJECT_NAME}_redis_${REDIS_VER}
    image: redis:${REDIS_VER}
    command: redis-server --requirepass ${REDIS_PASSWORD} && apk add net-tools
    volumes:
      - ./redis-data:/var/lib/redis
      - ./redis_data:/data
      - ./configFiles/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - ${REDIS_PORT}:6379
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: unless-stopped

networks:
  ${PREFIX_PROJECT_NAME}:
# #    ipam:
# #      config:
# #        - subnet: 172.16.238.0/24
# #          gateway: 172.16.238.1